/**
 * Provides the block_todo/control module
 *
 * @category   output
 * @copyright  2018 David Mudr√°k <david@moodle.com>
 * @author     2023 David Woloszyn <david.woloszyn@moodle.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("block_todo/control",["jquery","core/log","core/ajax","core/templates","core/str","core/modal_factory","core/modal_events"],(function($,Log,Ajax,Templates,Str,ModalFactory,ModalEvents){let instanceid=null;function init(id){var region=$('[data-region="block_todo-instance-'+id+'"]').first();region.length?(instanceid=id,new TodoControl(region).main()):Log.error("block_todo/control: wrapping region not found!")}function TodoControl(region){this.region=region}TodoControl.prototype.main=function(){this.main=this.region.find('[data-control="main"]'),this.itemsList=this.region.find(".list-wrapper"),this.currentHideDone=this.region.find("[data-hidedone]"),this.initFeatures()},TodoControl.prototype.initFeatures=function(){var self=this;self.main.off(),self.itemsList.off(),self.main.on("click",'[data-control="additem"]',(function(e){self.addItem(e)})),self.itemsList.on("click",'[data-control="toggle"]',(function(e){var id=$(e.currentTarget).closest("[data-item]").attr("data-item");self.toggleItem(id)})),self.itemsList.on("click",'[data-control="delete"]',(function(e){var id=$(e.currentTarget).closest("[data-item]").attr("data-item"),text=$(e.currentTarget).closest("[data-item]").attr("data-text");self.deleteItem(e,id,text)})),self.itemsList.on("click",'[data-control="edit"]',(function(e){var id=$(e.currentTarget).closest("[data-item]").attr("data-item"),text=$(e.currentTarget).closest("[data-item]").attr("data-text"),duedate=$(e.currentTarget).closest("[data-item]").attr("data-duedate");self.editItem(e,id,text,duedate)})),self.itemsList.on("click",'[data-control="pin"]',(function(e){var id=$(e.currentTarget).closest("[data-item]").attr("data-item");self.pinItem(id)})),self.main.on("click",'[data-control="hidedone"]',(function(){var currentlyHidden=getHiddenState(self);void 0!==currentlyHidden&&self.hideDoneItems(currentlyHidden)}))};const getHiddenState=self=>Boolean(parseInt(self.currentHideDone.attr("data-hidedone")));function dateToTimestamp(date){return Date.parse(date)/1e3}return TodoControl.prototype.addItem=function(e){var self=this,trigger=$(e.currentTarget);return ModalFactory.create({type:ModalFactory.types.SAVE_CANCEL,title:Str.getString("additem","block_todo"),body:Templates.render("block_todo/add")},trigger).done((function(modal){modal.getRoot().on(ModalEvents.save,(function(e){var modalBody=modal.getBody(),text=$.trim(modalBody.find(".block_todo_add_text").val()),duedate=dateToTimestamp(modalBody.find(".block_todo_add_duedate").val());return text?Ajax.call([{methodname:"block_todo_add_item",args:{instanceid:instanceid,todotext:text,duedate:duedate}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to add the item"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()})):(modalBody.find(".block_todo_add_text").focus(),e.preventDefault(),!1)})),modal.getRoot().on(ModalEvents.hidden,(function(){modal.destroy()})),modal.show()})),$.Deferred().resolve()},TodoControl.prototype.toggleItem=function(id){var self=this;return id?Ajax.call([{methodname:"block_todo_toggle_item",args:{instanceid:instanceid,id:id,hide:getHiddenState(self)}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to toggle the item"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()})):(Log.error("block_todo/control: no id provided"),$.Deferred().resolve())},TodoControl.prototype.editItem=function(e,id,text,duedate){var self=this,trigger=$(e.currentTarget);if(!id)return Log.error("block_todo/control: no id provided"),$.Deferred().resolve();const args={id:id,text:text,duedate:null};return duedate&&(args.duedate=function(timestamp){const date=new Date(1e3*timestamp);return[date.getFullYear(),("0"+(date.getMonth()+1)).slice(-2),("0"+date.getDate()).slice(-2)].join("-")}(duedate)),ModalFactory.create({type:ModalFactory.types.SAVE_CANCEL,title:Str.getString("edititem","block_todo"),body:Templates.render("block_todo/edit",args)},trigger).done((function(modal){modal.getRoot().on(ModalEvents.save,(function(e){var modalBody=modal.getBody(),newText=$.trim(modalBody.find(".block_todo_edit_text").val()),newDuedate=dateToTimestamp(modalBody.find(".block_todo_edit_duedate").val());return newText?Ajax.call([{methodname:"block_todo_edit_item",args:{instanceid:instanceid,id:id,todotext:newText,duedate:newDuedate}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to edit the item"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()})):(modalBody.find(".block_todo_edit_text").focus(),e.preventDefault(),!1)})),modal.getRoot().on(ModalEvents.hidden,(function(){modal.destroy()})),modal.show()})),$.Deferred().resolve()},TodoControl.prototype.deleteItem=function(e,id,text){var self=this,trigger=$(e.currentTarget);return id?(ModalFactory.create({type:ModalFactory.types.SAVE_CANCEL,title:Str.getString("deleteitem","block_todo"),body:"Are you sure you want to delete <strong>"+text+"</strong>?"},trigger).done((function(modal){modal.setSaveButtonText("Confirm"),modal.getRoot().on(ModalEvents.save,(function(){return Ajax.call([{methodname:"block_todo_delete_item",args:{instanceid:instanceid,id:id}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to delete the item"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()}))})),modal.getRoot().on(ModalEvents.hidden,(function(){modal.destroy()})),modal.show()})),$.Deferred().resolve()):(Log.error("block_todo/control: no id provided"),$.Deferred().resolve())},TodoControl.prototype.pinItem=function(id){var self=this;return id?Ajax.call([{methodname:"block_todo_pin_item",args:{instanceid:instanceid,id:id}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to pin the item"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()})):(Log.error("block_todo/control: no id provided"),$.Deferred().resolve())},TodoControl.prototype.hideDoneItems=function(hide){var self=this;return hide=!hide,Ajax.call([{methodname:"block_todo_hide_done_items",args:{instanceid:instanceid,hide:hide}}])[0].fail((function(reason){return Log.error("block_todo/control: unable to hide/show the items"),Log.debug(reason),$.Deferred().reject()})).then((function(response){return self.itemsList.replaceWith(response),init(instanceid),$.Deferred().resolve()}))},{init:init}}));

//# sourceMappingURL=control.min.js.map