{"version":3,"file":"control.min.js","sources":["../src/control.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the block_todo/control module\n *\n * @category   output\n * @copyright  2018 David Mudr√°k <david@moodle.com>\n * @author     2023 David Woloszyn <david.woloszyn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module block_todo/control\n */\ndefine([\n        'jquery',\n        'core/log',\n        'core/ajax',\n        'core/templates',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events'\n    ],\n    function(\n        $,\n        Log,\n        Ajax,\n        Templates,\n        Str,\n        ModalFactory,\n        ModalEvents\n    ) {\n    'use strict';\n\n    let instanceid = null;\n\n    /**\n     * Initializes the block controls.\n     *\n     * @param {number} id The instance id\n     */\n    function init(id) {\n\n        var region = $('[data-region=\"block_todo-instance-' + id + '\"]').first();\n\n        if (!region.length) {\n            Log.error('block_todo/control: wrapping region not found!');\n            return;\n        }\n\n        instanceid = id;\n        var control = new TodoControl(region);\n        control.main();\n    }\n\n    /**\n     * Controls a single ToDo block instance contents.\n     *\n     * @constructor\n     * @param {jQuery} region\n     */\n    function TodoControl(region) {\n        var self = this;\n        self.region = region;\n    }\n\n    /**\n     * Run the controller.\n     *\n     */\n    TodoControl.prototype.main = function() {\n        var self = this;\n\n        self.main = self.region.find('[data-control=\"main\"]');\n        self.itemsList = self.region.find('.list-wrapper');\n        self.currentHideDone = self.region.find('[data-hidedone]');\n        self.currentGroup = self.region.find('[data-currentgroup]');\n        self.hideDoneButton = self.region.find('[data-control=\"hidedone\"]');\n        self.groupButtons = self.region.find('[data-control=\"hidedone\"]');\n\n        self.initFeatures();\n    };\n\n    /**\n     * Initialize the controls for adding a new todo item.\n     *\n     * @method\n     */\n    TodoControl.prototype.initFeatures = function() {\n        var self = this;\n\n        // Reset all event listeners.\n        self.main.off();\n        self.itemsList.off();\n\n        // Add item.\n        self.main.on('click', '[data-control=\"additem\"]', function(e) {\n            self.addItem(e);\n        });\n        // Toggle item completion.\n        self.itemsList.on('click', '[data-control=\"toggle\"]', function(e) {\n            var id = $(e.currentTarget).closest('[data-item]').attr('data-item');\n            self.toggleItem(id);\n        });\n        // Delete item.\n        self.itemsList.on('click', '[data-control=\"delete\"]', function(e) {\n            var id = $(e.currentTarget).closest('[data-item]').attr('data-item');\n            var text = $(e.currentTarget).closest('[data-item]').attr('data-text');\n            self.deleteItem(e, id, text);\n        });\n        // Edit item.\n        self.itemsList.on('click', '[data-control=\"edit\"]', function(e) {\n            var id = $(e.currentTarget).closest('[data-item]').attr('data-item');\n            var text = $(e.currentTarget).closest('[data-item]').attr('data-text');\n            var duedate = $(e.currentTarget).closest('[data-item]').attr('data-duedate');\n            var groupid = $(e.currentTarget).closest('[data-item]').attr('data-groupid');\n            self.editItem(e, id, text, duedate, groupid);\n        });\n        // Pin item.\n        self.itemsList.on('click', '[data-control=\"pin\"]', function(e) {\n            var id = $(e.currentTarget).closest('[data-item]').attr('data-item');\n            self.pinItem(id);\n        });\n        // Hide done items.\n        self.main.on('click', '[data-control=\"hidedone\"]', function() {\n            var currentlyHidden = getHiddenState(self);\n            if (typeof currentlyHidden !== 'undefined') {\n                self.hideDoneItems(currentlyHidden);\n            }\n        });\n        // Group items.\n        self.main.on('click', '[data-control=\"group\"]', function(e) {\n            var groupid = $(e.currentTarget).find('[data-groupid]').attr('data-groupid');\n            self.groupItems(groupid);\n        });\n        // Delete completed items.\n        self.itemsList.on('click', '[data-control=\"deletedone\"]', function(e) {\n            self.deleteCompleted(e);\n        });\n    };\n\n    /**\n     * Are there hidden items?\n     *\n     * @param {jQuery} self\n     * @returns {boolean}\n     */\n    const getHiddenState = (self) => {\n        return Boolean(parseInt(self.currentHideDone.attr('data-hidedone')));\n    };\n\n    /**\n     * What is the current group this page is displaying?\n     *\n     * @param {jQuery} self\n     * @returns {number}\n     */\n    const getCurrentGroup = (self) => {\n        return parseInt(self.currentGroup.attr('data-currentgroup'));\n    };\n\n    /**\n     * Add a new item.\n     *\n     * @method\n     * @param {Event} e The event\n     * @return {Deferred}\n     */\n    TodoControl.prototype.addItem = async function(e) {\n        var self = this;\n        var trigger = $(e.currentTarget);\n        var groups = await getGroupList();\n\n        const args = {\n            groups: groups,\n        };\n\n        // Create modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: Str.getString('additem', 'block_todo'),\n            body: Templates.render('block_todo/add', args),\n        }, trigger)\n        .done(function(modal) {\n\n            modal.getRoot().on(ModalEvents.save, function(e) {\n                var modalBody = modal.getBody();\n                var text = $.trim(modalBody.find('.block_todo_add_text').val());\n                var duedate = dateToTimestamp(modalBody.find('.block_todo_add_duedate').val());\n                var groupid = parseInt(modalBody.find('input[name=\"block_todo_group\"]:checked').val()) || 0;\n\n                // Ensure there is a text value.\n                if (!text) {\n                    modalBody.find('.block_todo_add_text').focus();\n                    e.preventDefault();\n                    return false;\n                }\n\n                return Ajax.call([{\n                    methodname: 'block_todo_add_item',\n                    args: {\n                        instanceid: instanceid,\n                        todotext: text,\n                        duedate: duedate,\n                        groupid: groupid,\n                        includehidden: !getHiddenState(self),\n                        currentgroup: getCurrentGroup(self)\n                    }\n\n                }])[0].fail(function(reason) {\n                    Log.error('block_todo/control: unable to add the item');\n                    Log.debug(reason);\n                    return $.Deferred().reject();\n\n                }).then(function(response) {\n                    self.itemsList.replaceWith(response);\n                    init(instanceid);\n                    return $.Deferred().resolve();\n                });\n            });\n\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n\n            // Show the modal.\n            modal.show();\n        });\n        return $.Deferred().resolve();\n    };\n\n    /**\n     * Toggle the done status of the given item.\n     *\n     * @method\n     * @param {number} id The item id\n     * @return {Deferred}\n     */\n    TodoControl.prototype.toggleItem = function(id) {\n        var self = this;\n\n        if (!id) {\n            Log.error('block_todo/control: no id provided');\n            return $.Deferred().resolve();\n        }\n\n        return Ajax.call([{\n            methodname: 'block_todo_toggle_item',\n            args: {\n                instanceid: instanceid,\n                id: id,\n                hide: getHiddenState(self),\n                includehidden: !getHiddenState(self),\n                currentgroup: getCurrentGroup(self)\n            }\n\n        }])[0].fail(function(reason) {\n            Log.error('block_todo/control: unable to toggle the item');\n            Log.debug(reason);\n            return $.Deferred().reject();\n\n        }).then(function(response) {\n            self.itemsList.replaceWith(response);\n            init(instanceid);\n            return $.Deferred().resolve();\n        });\n    };\n\n    /**\n     * Edit the given item.\n     *\n     * @method\n     * @param {Event} e The event\n     * @param {number} id The item id\n     * @param {string} text The text\n     * @param {number} duedate The due date\n     * @param {number} groupid The group id\n     * @return {Deferred}\n     */\n    TodoControl.prototype.editItem = async function(e, id, text, duedate, groupid) {\n        var self = this;\n        var trigger = $(e.currentTarget);\n\n        if (!id) {\n            Log.error('block_todo/control: no id provided');\n            return $.Deferred().resolve();\n        }\n\n        var groups = await getGroupList(groupid);\n\n        const args = {\n            id: id,\n            text: text,\n            duedate: null,\n            groups: groups,\n            includehidden: !getHiddenState(self),\n            currentgroup: getCurrentGroup(self)\n        };\n\n        if (duedate) {\n            args.duedate = timestampToDate(duedate);\n        }\n\n        // Create modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: Str.getString('edititem', 'block_todo'),\n            body: Templates.render('block_todo/edit', args),\n        }, trigger)\n        .done(function(modal) {\n\n            modal.getRoot().on(ModalEvents.save, function(e) {\n\n                var modalBody = modal.getBody();\n                var newText = $.trim(modalBody.find('.block_todo_edit_text').val());\n                var newDuedate = dateToTimestamp(modalBody.find('.block_todo_edit_duedate').val());\n                var newGroupId = parseInt(modalBody.find('input[name=\"block_todo_group\"]:checked').val()) || 0;\n\n                // Ensure there is a text value.\n                if (!newText) {\n                    modalBody.find('.block_todo_edit_text').focus();\n                    e.preventDefault();\n                    return false;\n                }\n\n                return Ajax.call([{\n                    methodname: 'block_todo_edit_item',\n                    args: {\n                        instanceid: instanceid,\n                        id: id,\n                        todotext: newText,\n                        duedate: newDuedate,\n                        groupid: newGroupId,\n                        includehidden: !getHiddenState(self),\n                        currentgroup: getCurrentGroup(self)\n                    }\n\n                }])[0].fail(function(reason) {\n                    Log.error('block_todo/control: unable to edit the item');\n                    Log.debug(reason);\n                    return $.Deferred().reject();\n\n                }).then(function(response) {\n                    self.itemsList.replaceWith(response);\n                    init(instanceid);\n                    return $.Deferred().resolve();\n                });\n            });\n\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n\n            // Show the modal.\n            modal.show();\n        });\n        return $.Deferred().resolve();\n    };\n\n    /**\n     * Delete the given item.\n     *\n     * @method\n     * @param {Event} e The event\n     * @param {number} id The item id\n     * @param {string} text The text\n     * @return {Deferred}\n     */\n    TodoControl.prototype.deleteItem = function(e, id, text) {\n        var self = this;\n        var trigger = $(e.currentTarget);\n\n        if (!id) {\n            Log.error('block_todo/control: no id provided');\n            return $.Deferred().resolve();\n        }\n\n        // Create modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: Str.getString('deleteitem', 'block_todo'),\n            body: Str.getString('confirmdeletesingle', 'block_todo', text),\n        }, trigger)\n        .done(function(modal) {\n\n            modal.setSaveButtonText('Confirm');\n            modal.getRoot().on(ModalEvents.save, function() {\n\n                return Ajax.call([{\n                    methodname: 'block_todo_delete_item',\n                    args: {\n                        instanceid: instanceid,\n                        id: id,\n                        includehidden: !getHiddenState(self),\n                        currentgroup: getCurrentGroup(self)\n                    }\n\n                }])[0].fail(function(reason) {\n                    Log.error('block_todo/control: unable to delete the item');\n                    Log.debug(reason);\n                    return $.Deferred().reject();\n\n                }).then(function(response) {\n                    self.itemsList.replaceWith(response);\n                    init(instanceid);\n                    return $.Deferred().resolve();\n                });\n            });\n\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n\n            // Show the modal.\n            modal.show();\n        });\n        return $.Deferred().resolve();\n    };\n\n/**\n     * Delete all completed items.\n     *\n     * @method\n     * @param {Event} e The event\n     * @return {Deferred}\n     */\n    TodoControl.prototype.deleteCompleted = function(e) {\n        var self = this;\n        var trigger = $(e.currentTarget);\n\n        // Create modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: Str.getString('deletecompleted', 'block_todo'),\n            body: Str.getString('confirmdeletecompleted', 'block_todo'),\n        }, trigger)\n        .done(function(modal) {\n\n            modal.setSaveButtonText('Confirm');\n            modal.getRoot().on(ModalEvents.save, function() {\n\n                return Ajax.call([{\n                    methodname: 'block_todo_delete_completed',\n                    args: {\n                        instanceid: instanceid,\n                        includehidden: !getHiddenState(self),\n                        currentgroup: getCurrentGroup(self)\n                    }\n\n                }])[0].fail(function(reason) {\n                    Log.error('block_todo/control: unable to delete completed items');\n                    Log.debug(reason);\n                    return $.Deferred().reject();\n\n                }).then(function(response) {\n                    self.itemsList.replaceWith(response);\n                    init(instanceid);\n                    return $.Deferred().resolve();\n                });\n            });\n\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n\n            // Show the modal.\n            modal.show();\n        });\n        return $.Deferred().resolve();\n    };\n\n    /**\n     * Toggle the pin status of the given item.\n     *\n     * @method\n     * @param {number} id The item id\n     * @return {Deferred}\n     */\n    TodoControl.prototype.pinItem = function(id) {\n        var self = this;\n\n        if (!id) {\n            Log.error('block_todo/control: no id provided');\n            return $.Deferred().resolve();\n        }\n\n        return Ajax.call([{\n            methodname: 'block_todo_pin_item',\n            args: {\n                instanceid: instanceid,\n                id: id,\n                includehidden: !getHiddenState(self),\n                currentgroup: getCurrentGroup(self)\n            }\n\n        }])[0].fail(function(reason) {\n            Log.error('block_todo/control: unable to pin the item');\n            Log.debug(reason);\n            return $.Deferred().reject();\n\n        }).then(function(response) {\n            self.itemsList.replaceWith(response);\n            init(instanceid);\n            return $.Deferred().resolve();\n        });\n    };\n\n    /**\n     * Toggle the hide status of the given items.\n     *\n     * @method\n     * @param {boolean} hide To current hidden state (true means hidden).\n     * @return {Deferred}\n     */\n    TodoControl.prototype.hideDoneItems = function(hide) {\n        var self = this;\n\n        // Invert the boolean to toggle the current hidden status.\n        hide = !hide;\n\n        return Ajax.call([{\n            methodname: 'block_todo_hide_done_items',\n            args: {\n                instanceid: instanceid,\n                hide: hide,\n                includehidden: false,\n                currentgroup: getCurrentGroup(self)\n            }\n\n        }])[0].fail(function(reason) {\n            Log.error('block_todo/control: unable to hide/show the items');\n            Log.debug(reason);\n            return $.Deferred().reject();\n\n        }).then(function(response) {\n            self.itemsList.replaceWith(response);\n            // Toggle the icon.\n            if (getHiddenState(self)) {\n                self.hideDoneButton.find('i').addClass('fa-eye-slash');\n                self.hideDoneButton.find('i').removeClass('fa-eye');\n            } else {\n                self.hideDoneButton.find('i').addClass('fa-eye');\n                self.hideDoneButton.find('i').removeClass('fa-eye-slash');\n            }\n            init(instanceid);\n            return $.Deferred().resolve();\n        });\n    };\n\n    /**\n     * Group items together based on provided group id.\n     *\n     * @method\n     * @param {number} groupid The group id to use.\n     * @return {Deferred}\n     */\n    TodoControl.prototype.groupItems = function(groupid) {\n        var self = this;\n\n        return Ajax.call([{\n            methodname: 'block_todo_group_items',\n            args: {\n                instanceid: instanceid,\n                groupid: groupid,\n                includehidden: !getHiddenState(self),\n            }\n\n        }])[0].fail(function(reason) {\n            Log.error('block_todo/control: unable to group the items');\n            Log.debug(reason);\n            return $.Deferred().reject();\n\n        }).then(function(response) {\n            self.itemsList.replaceWith(response);\n            init(instanceid);\n            return $.Deferred().resolve();\n        });\n    };\n\n    /**\n     * Get group list.\n     *\n     * @param {number|null} selected groupid to use as the selection.\n     * @returns {array}\n     */\n    const getGroupList = async(selected = null) => {\n        return [\n            {\n                groupid: 0,\n                groupname: await Str.getString('labelgroup0', 'block_todo'),\n                groupicon: '',\n                selected: selected == 0,\n            },\n            {\n                groupid: 1,\n                groupname: await Str.getString('labelgroup1', 'block_todo'),\n                groupicon: 'fa-star',\n                selected: selected == 1,\n            },\n            {\n                groupid: 2,\n                groupname: await Str.getString('labelgroup2', 'block_todo'),\n                groupicon: 'fa-star',\n                selected: selected == 2,\n            },\n            {\n                groupid: 3,\n                groupname: await Str.getString('labelgroup3', 'block_todo'),\n                groupicon: 'fa-star',\n                selected: selected == 3,\n            },\n            {\n                groupid: 4,\n                groupname: await Str.getString('labelgroup4', 'block_todo'),\n                groupicon: 'fa-star',\n                selected: selected == 4,\n            },\n            {\n                groupid: 5,\n                groupname: await Str.getString('labelgroup5', 'block_todo'),\n                groupicon: 'fa-star',\n                selected: selected == 5,\n            },\n        ];\n    };\n\n    /**\n     * Take a date string and convert to timestamp\n     *\n     * @param {string} date date string\n     * @return {number} 10 digit timestamp\n     */\n    function dateToTimestamp(date) {\n        return Date.parse(date) / 1000;\n    }\n\n    /**\n     * Take a 10 digit timestamp and convert to date string\n     *\n     * @param {number} timestamp 10 digit timestamp\n     * @return {string} YYYY-MM-DD\n     */\n    function timestampToDate(timestamp) {\n        const date = new Date(timestamp * 1000);\n        const datevalues = [\n            date.getFullYear(),\n            (\"0\" + (date.getMonth() + 1)).slice(-2),\n            (\"0\" + date.getDate()).slice(-2),\n        ];\n        return datevalues.join('-');\n    }\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","Log","Ajax","Templates","Str","ModalFactory","ModalEvents","instanceid","init","id","region","first","length","TodoControl","main","error","this","prototype","find","itemsList","currentHideDone","currentGroup","hideDoneButton","groupButtons","initFeatures","self","off","on","e","addItem","currentTarget","closest","attr","toggleItem","text","deleteItem","duedate","groupid","editItem","pinItem","currentlyHidden","getHiddenState","hideDoneItems","groupItems","deleteCompleted","Boolean","parseInt","getCurrentGroup","async","trigger","args","groups","getGroupList","create","type","types","SAVE_CANCEL","title","getString","body","render","done","modal","getRoot","save","modalBody","getBody","trim","val","dateToTimestamp","call","methodname","todotext","includehidden","currentgroup","fail","reason","debug","Deferred","reject","then","response","replaceWith","resolve","focus","preventDefault","hidden","destroy","show","hide","timestamp","date","Date","getFullYear","getMonth","slice","getDate","join","timestampToDate","newText","newDuedate","newGroupId","setSaveButtonText","addClass","removeClass","selected","groupname","groupicon","parse"],"mappings":"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"}